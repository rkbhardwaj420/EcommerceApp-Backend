{
    "sourceFile": "db.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1723618771636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723618771709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,13 @@\n \r\n const data = [{\r\n     \"id\":0,\r\n    \"name\":\"jatin\",\r\n-   \"Class\" : \"C- class\"    \r\n+   \"Class\" : \"C- class\"\r\n }, {\r\n     \"id\":1,\r\n     \"name\":\"Rahul\",\r\n-    \"Class\" : \"A- class\"    \r\n+    \"Class\" : \"A- class\"\r\n  }]\r\n \r\n mongoose.connect(process.env.MONGODB).then(()=>{\r\n     console.log(\r\n@@ -31,12 +31,12 @@\n });\r\n const User = mongoose.model('user', userSchema)\r\n \r\n \r\n-//get all data \r\n+//get all data\r\n //1: Method : -- GEt Method done\r\n //2: RouteName : /getuser\r\n-//3: All Data : \r\n+//3: All Data :\r\n \r\n \r\n ///getbyId\r\n \r\n@@ -45,16 +45,16 @@\n //getuser: getuserid\r\n //2: getbyid\r\n ///\r\n \r\n-//res: status , json()   404 , 500 , 200 , 201 ,Server error \r\n+//res: status , json()   404 , 500 , 200 , 201 ,Server error\r\n app.get(\"/getuser\" , function(req, res){\r\n-    \r\n+\r\n return res.status(200).send(data);\r\n });\r\n app.get(\"/:getuserid\" , function(req, res){\r\n     return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n-}) \r\n+})\r\n \r\n \r\n \r\n app.listen( 8200, ()=>{\r\n"
                },
                {
                    "date": 1724233132328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,22 @@\n import express from \"express\";\r\n import dotenv  from \"dotenv\";\r\n import mongoose from \"mongoose\";\r\n-\r\n+import User from \"./models/todos/user.models.js\"\r\n dotenv.config();\r\n const app = express();\r\n \r\n-const data = [{\r\n-    \"id\":0,\r\n-   \"name\":\"jatin\",\r\n-   \"Class\" : \"C- class\"\r\n-}, {\r\n-    \"id\":1,\r\n-    \"name\":\"Rahul\",\r\n-    \"Class\" : \"A- class\"\r\n- }]\r\n \r\n mongoose.connect(process.env.MONGODB).then(()=>{\r\n     console.log(\r\n         \"connected succesfully\"\r\n     )\r\n }).catch((err)=>{\r\n     console.log(\"Server error\" + err)\r\n })\r\n-// Schema\r\n-const userSchema = new mongoose.Schema({\r\n-    firstName: {\r\n-        type: String,\r\n-        required: true,\r\n-    }\r\n-});\r\n-const User = mongoose.model('user', userSchema)\r\n \r\n \r\n-//get all data\r\n-//1: Method : -- GEt Method done\r\n-//2: RouteName : /getuser\r\n-//3: All Data :\r\n \r\n-\r\n-///getbyId\r\n-\r\n-\r\n-//1: Method : -- GEt Method done\r\n-//getuser: getuserid\r\n-//2: getbyid\r\n-///\r\n-\r\n //res: status , json()   404 , 500 , 200 , 201 ,Server error\r\n app.get(\"/getuser\" , function(req, res){\r\n \r\n return res.status(200).send(data);\r\n@@ -54,8 +24,16 @@\n app.get(\"/:getuserid\" , function(req, res){\r\n     return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n })\r\n \r\n+app.post(\"/creatuser\", function(req,res){\r\n+    const data  = new User({\r\n+        username: \"js223\",\r\n+        email: \"js@gmail.com\",\r\n+        password: \"js1234\",\r\n+    });\r\n+    data.save();\r\n+})\r\n \r\n \r\n app.listen( 8200, ()=>{\r\n     console.log(\"server is running on port 8200\")\r\n"
                },
                {
                    "date": 1724233220691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,11 @@\n         email: \"js@gmail.com\",\r\n         password: \"js1234\",\r\n     });\r\n     data.save();\r\n+    return res.status(200).json(\"data has been sumbitted\")\r\n })\r\n \r\n \r\n-app.listen( 8200, ()=>{\r\n+app.listen(8200, ()=>{\r\n     console.log(\"server is running on port 8200\")\r\n })\r\n"
                },
                {
                    "date": 1724233282647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n app.get(\"/:getuserid\" , function(req, res){\r\n     return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n })\r\n \r\n-app.post(\"/creatuser\", function(req,res){\r\n+app.get(\"/creatuser\", function(req,res){\r\n     const data  = new User({\r\n         username: \"js223\",\r\n         email: \"js@gmail.com\",\r\n         password: \"js1234\",\r\n"
                },
                {
                    "date": 1724233599295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n app.get(\"/:getuserid\" , function(req, res){\r\n     return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n })\r\n \r\n-app.get(\"/creatuser\", function(req,res){\r\n+app.post(\"/creatuser\", function(req,res){\r\n     const data  = new User({\r\n         username: \"js223\",\r\n         email: \"js@gmail.com\",\r\n         password: \"js1234\",\r\n"
                },
                {
                    "date": 1724233623015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,11 @@\n     return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n })\r\n \r\n app.post(\"/creatuser\", function(req,res){\r\n-    const data  = new User({\r\n-        username: \"js223\",\r\n-        email: \"js@gmail.com\",\r\n-        password: \"js1234\",\r\n-    });\r\n+    const data  = new User(\r\n+        req.body\r\n+    );\r\n     data.save();\r\n     return res.status(200).json(\"data has been sumbitted\")\r\n })\r\n \r\n"
                },
                {
                    "date": 1724233631717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,13 @@\n     return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n })\r\n \r\n app.post(\"/creatuser\", function(req,res){\r\n-    const data  = new User(\r\n-        req.body\r\n-    );\r\n+    const data  = new User({\r\n+        username: \"js223\",\r\n+        email: \"js@gmail.com\",\r\n+        password: \"js1234\",\r\n+    });\r\n     data.save();\r\n     return res.status(200).json(\"data has been sumbitted\")\r\n })\r\n \r\n"
                },
                {
                    "date": 1724233639486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,18 +14,8 @@\n     console.log(\"Server error\" + err)\r\n })\r\n \r\n \r\n-\r\n-//res: status , json()   404 , 500 , 200 , 201 ,Server error\r\n-app.get(\"/getuser\" , function(req, res){\r\n-\r\n-return res.status(200).send(data);\r\n-});\r\n-app.get(\"/:getuserid\" , function(req, res){\r\n-    return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n-})\r\n-\r\n app.post(\"/creatuser\", function(req,res){\r\n     const data  = new User({\r\n         username: \"js223\",\r\n         email: \"js@gmail.com\",\r\n"
                },
                {
                    "date": 1724233753808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,42 @@\n import express from \"express\";\r\n-import dotenv  from \"dotenv\";\r\n+import dotenv from \"dotenv\";\r\n import mongoose from \"mongoose\";\r\n-import User from \"./models/todos/user.models.js\"\r\n+import { User } from \"./models/todos/user.models.js\"; // Make sure your export/import is consistent\r\n+\r\n dotenv.config();\r\n const app = express();\r\n \r\n+// Middleware to parse incoming JSON requests\r\n+app.use(express.json());\r\n \r\n-mongoose.connect(process.env.MONGODB).then(()=>{\r\n-    console.log(\r\n-        \"connected succesfully\"\r\n-    )\r\n-}).catch((err)=>{\r\n-    console.log(\"Server error\" + err)\r\n-})\r\n+mongoose.connect(process.env.MONGODB, { \r\n+    useNewUrlParser: true, \r\n+    useUnifiedTopology: true \r\n+}).then(() => {\r\n+    console.log(\"Connected to MongoDB successfully\");\r\n+}).catch((err) => {\r\n+    console.log(\"Error connecting to MongoDB: \" + err);\r\n+});\r\n \r\n+app.post(\"/createuser\", async (req, res) => {\r\n+    try {\r\n+        // Use request body instead of hardcoded values\r\n+        const data = new User({\r\n+            username: req.body.username,\r\n+            email: req.body.email,\r\n+            password: req.body.password\r\n+        });\r\n \r\n-app.post(\"/creatuser\", function(req,res){\r\n-    const data  = new User({\r\n-        username: \"js223\",\r\n-        email: \"js@gmail.com\",\r\n-        password: \"js1234\",\r\n-    });\r\n-    data.save();\r\n-    return res.status(200).json(\"data has been sumbitted\")\r\n-})\r\n+        // Save the data\r\n+        await data.save();\r\n \r\n+        return res.status(200).json({ message: \"User has been created successfully\" });\r\n+    } catch (error) {\r\n+        // Catch and handle any errors\r\n+        return res.status(500).json({ message: \"Server error\", error: error.message });\r\n+    }\r\n+});\r\n \r\n-app.listen(8200, ()=>{\r\n-    console.log(\"server is running on port 8200\")\r\n-})\r\n+app.listen(8200, () => {\r\n+    console.log(\"Server is running on port 8200\");\r\n+});\r\n"
                },
                {
                    "date": 1724233753844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n \r\n // Middleware to parse incoming JSON requests\r\n app.use(express.json());\r\n \r\n-mongoose.connect(process.env.MONGODB, { \r\n-    useNewUrlParser: true, \r\n-    useUnifiedTopology: true \r\n+mongoose.connect(process.env.MONGODB, {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true\r\n }).then(() => {\r\n     console.log(\"Connected to MongoDB successfully\");\r\n }).catch((err) => {\r\n     console.log(\"Error connecting to MongoDB: \" + err);\r\n"
                },
                {
                    "date": 1724234022778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,26 +17,63 @@\n }).catch((err) => {\r\n     console.log(\"Error connecting to MongoDB: \" + err);\r\n });\r\n \r\n+// app.post(\"/createuser\", async (req, res) => {\r\n+//     try {\r\n+//         // Use request body instead of hardcoded values\r\n+//         const data = new User({\r\n+//             username: req.body.username,\r\n+//             email: req.body.email,\r\n+//             password: req.body.password\r\n+//         });\r\n+\r\n+//         // Save the data\r\n+//         await data.save();\r\n+\r\n+//         return res.status(200).json({ message: \"User has been created successfully\" });\r\n+//     } catch (error) {\r\n+//         // Catch and handle any errors\r\n+//         return res.status(500).json({ message: \"Server error\", error: error.message });\r\n+//     }\r\n+// });\r\n+\r\n+\r\n app.post(\"/createuser\", async (req, res) => {\r\n     try {\r\n-        // Use request body instead of hardcoded values\r\n-        const data = new User({\r\n-            username: req.body.username,\r\n-            email: req.body.email,\r\n-            password: req.body.password\r\n+        // Destructure the data from request body\r\n+        const { username, email, password } = req.body;\r\n+\r\n+        // Basic validation\r\n+        if (!username || !email || !password) {\r\n+            return res.status(400).json({ message: \"All fields are required\" });\r\n+        }\r\n+\r\n+        // Check if the username or email already exists\r\n+        const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: \"Username or Email already exists\" });\r\n+        }\r\n+\r\n+        // Create a new user instance\r\n+        const newUser = new User({\r\n+            username,\r\n+            email,\r\n+            password\r\n         });\r\n \r\n-        // Save the data\r\n-        await data.save();\r\n+        // Save the new user\r\n+        await newUser.save();\r\n \r\n+        // Respond with success message\r\n         return res.status(200).json({ message: \"User has been created successfully\" });\r\n     } catch (error) {\r\n-        // Catch and handle any errors\r\n+        // Handle server errors\r\n         return res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n });\r\n \r\n+\r\n+\r\n app.listen(8200, () => {\r\n     console.log(\"Server is running on port 8200\");\r\n });\r\n"
                },
                {
                    "date": 1724234083305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,63 +17,26 @@\n }).catch((err) => {\r\n     console.log(\"Error connecting to MongoDB: \" + err);\r\n });\r\n \r\n-// app.post(\"/createuser\", async (req, res) => {\r\n-//     try {\r\n-//         // Use request body instead of hardcoded values\r\n-//         const data = new User({\r\n-//             username: req.body.username,\r\n-//             email: req.body.email,\r\n-//             password: req.body.password\r\n-//         });\r\n-\r\n-//         // Save the data\r\n-//         await data.save();\r\n-\r\n-//         return res.status(200).json({ message: \"User has been created successfully\" });\r\n-//     } catch (error) {\r\n-//         // Catch and handle any errors\r\n-//         return res.status(500).json({ message: \"Server error\", error: error.message });\r\n-//     }\r\n-// });\r\n-\r\n-\r\n app.post(\"/createuser\", async (req, res) => {\r\n     try {\r\n-        // Destructure the data from request body\r\n-        const { username, email, password } = req.body;\r\n-\r\n-        // Basic validation\r\n-        if (!username || !email || !password) {\r\n-            return res.status(400).json({ message: \"All fields are required\" });\r\n-        }\r\n-\r\n-        // Check if the username or email already exists\r\n-        const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: \"Username or Email already exists\" });\r\n-        }\r\n-\r\n-        // Create a new user instance\r\n-        const newUser = new User({\r\n-            username,\r\n-            email,\r\n-            password\r\n+        // Use request body instead of hardcoded values\r\n+        const data = new User({\r\n+            username: req.body.username,\r\n+            email: req.body.email,\r\n+            password: req.body.password\r\n         });\r\n \r\n-        // Save the new user\r\n-        await newUser.save();\r\n+        // Save the data\r\n+        await data.save();\r\n \r\n-        // Respond with success message\r\n         return res.status(200).json({ message: \"User has been created successfully\" });\r\n     } catch (error) {\r\n-        // Handle server errors\r\n+        // Catch and handle any errors\r\n         return res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n });\r\n \r\n-\r\n-\r\n app.listen(8200, () => {\r\n     console.log(\"Server is running on port 8200\");\r\n });\r\n"
                },
                {
                    "date": 1724234164503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import express from \"express\";\r\n+import dotenv from \"dotenv\";\r\n+import mongoose from \"mongoose\";\r\n+import { User } from \"./models/todos/user.models.js\"; // Make sure your export/import is consistent\r\n+\r\n+dotenv.config();\r\n+const app = express();\r\n+\r\n+\r\n+app.use(express.json());\r\n+\r\n+mongoose.connect(process.env.MONGODB, {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true\r\n+}).then(() => {\r\n+    console.log(\"Connected to MongoDB successfully\");\r\n+}).catch((err) => {\r\n+    console.log(\"Error connecting to MongoDB: \" + err);\r\n+});\r\n+\r\n+app.post(\"/createuser\", async (req, res) => {\r\n+    try {\r\n+\r\n+        const data = new User({\r\n+            username: req.body.username,\r\n+            email: req.body.email,\r\n+            password: req.body.password\r\n+        });\r\n+\r\n+        // Save the data\r\n+        await data.save();\r\n+\r\n+        return res.status(200).json({ message: \"User has been created successfully\" });\r\n+    } catch (error) {\r\n+        // Catch and handle any errors\r\n+        return res.status(500).json({ message: \"Server error\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n+app.listen(8200, () => {\r\n+    console.log(\"Server is running on port 8200\");\r\n+});\r\n"
                },
                {
                    "date": 1724234206373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,63 +19,36 @@\n });\r\n \r\n app.post(\"/createuser\", async (req, res) => {\r\n     try {\r\n+        // Destructure the data from request body\r\n+        const { username, email, password } = req.body;\r\n \r\n-        const data = new User({\r\n-            username: req.body.username,\r\n-            email: req.body.email,\r\n-            password: req.body.password\r\n-        });\r\n+        // Basic validation\r\n+        if (!username || !email || !password) {\r\n+            return res.status(400).json({ message: \"All fields are required\" });\r\n+        }\r\n \r\n-        // Save the data\r\n-        await data.save();\r\n+        // Check if the username or email already exists\r\n+        const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: \"Username or Email already exists\" });\r\n+        }\r\n \r\n-        return res.status(200).json({ message: \"User has been created successfully\" });\r\n-    } catch (error) {\r\n-        // Catch and handle any errors\r\n-        return res.status(500).json({ message: \"Server error\", error: error.message });\r\n-    }\r\n-});\r\n-\r\n-app.listen(8200, () => {\r\n-    console.log(\"Server is running on port 8200\");\r\n-});\r\n-import express from \"express\";\r\n-import dotenv from \"dotenv\";\r\n-import mongoose from \"mongoose\";\r\n-import { User } from \"./models/todos/user.models.js\"; // Make sure your export/import is consistent\r\n-\r\n-dotenv.config();\r\n-const app = express();\r\n-\r\n-// Middleware to parse incoming JSON requests\r\n-app.use(express.json());\r\n-\r\n-mongoose.connect(process.env.MONGODB, {\r\n-    useNewUrlParser: true,\r\n-    useUnifiedTopology: true\r\n-}).then(() => {\r\n-    console.log(\"Connected to MongoDB successfully\");\r\n-}).catch((err) => {\r\n-    console.log(\"Error connecting to MongoDB: \" + err);\r\n-});\r\n-\r\n-app.post(\"/createuser\", async (req, res) => {\r\n-    try {\r\n-        // Use request body instead of hardcoded values\r\n-        const data = new User({\r\n-            username: req.body.username,\r\n-            email: req.body.email,\r\n-            password: req.body.password\r\n+        // Create a new user instance\r\n+        const newUser = new User({\r\n+            username,\r\n+            email,\r\n+            password\r\n         });\r\n \r\n-        // Save the data\r\n-        await data.save();\r\n+        // Save the new user\r\n+        await newUser.save();\r\n \r\n+        // Respond with success message\r\n         return res.status(200).json({ message: \"User has been created successfully\" });\r\n     } catch (error) {\r\n-        // Catch and handle any errors\r\n+        // Handle server errors\r\n         return res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1724234877079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import express from \"express\";\r\n+import dotenv from \"dotenv\";\r\n+import mongoose from \"mongoose\";\r\n+import { User } from \"./models/todos/user.models.js\";\r\n+\r\n+dotenv.config();\r\n+const app = express();\r\n+\r\n+\r\n+app.use(express.json());\r\n+\r\n+mongoose.connect(process.env.MONGODB, {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true\r\n+}).then(() => {\r\n+    console.log(\"Connected to MongoDB successfully\");\r\n+}).catch((err) => {\r\n+    console.log(\"Error connecting to MongoDB: \" + err);\r\n+});\r\n+\r\n+app.post(\"/createuser\", async (req, res) => {\r\n+    try {\r\n+        // Destructure the data from request body\r\n+        const { username, email, password } = req.body;\r\n+\r\n+        // Basic validation\r\n+        if (!username || !email || !password) {\r\n+            return res.status(400).json({ message: \"All fields are required\" });\r\n+        }\r\n+\r\n+        // Check if the username or email already exists\r\n+        const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: \"Username or Email already exists\" });\r\n+        }\r\n+\r\n+        // Create a new user instance\r\n+        const newUser = new User({\r\n+            username,\r\n+            email,\r\n+            password\r\n+        });\r\n+\r\n+        // Save the new user\r\n+        await newUser.save();\r\n+\r\n+        // Respond with success message\r\n+        return res.status(200).json({ message: \"User has been created successfully\" });\r\n+    } catch (error) {\r\n+        // Handle server errors\r\n+        return res.status(500).json({ message: \"Server error\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n+app.listen(8200, () => {\r\n+    console.log(\"Server is running on port 8200\");\r\n+});\r\n"
                },
                {
                    "date": 1724823426612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n });\r\n \r\n app.post(\"/createuser\", async (req, res) => {\r\n     try {\r\n-        \r\n+\r\n         const { username, email, password } = req.body;\r\n \r\n-  \r\n+\r\n         if (!username || !email || !password) {\r\n             return res.status(400).json({ message: \"All fields are required\" });\r\n         }\r\n \r\n@@ -33,19 +33,19 @@\n         // if (existingUser) {\r\n         //     return res.status(400).json({ message: \"Username or Email already exists\" });\r\n         // }\r\n \r\n-   \r\n+\r\n         const newUser = new User({\r\n             username,\r\n             email,\r\n             password\r\n         });\r\n \r\n-  \r\n+\r\n         await newUser.save();\r\n \r\n-     \r\n+\r\n         return res.status(200).json({ message: \"User has been created successfully\" });\r\n     } catch (error) {\r\n         // Handle server errors\r\n         return res.status(500).json({ message: \"Server error\", error: error.message });\r\n"
                },
                {
                    "date": 1724910797031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import express from \"express\";\r\n+import dotenv from \"dotenv\";\r\n+import cors from 'cors';\r\n+\r\n+import mongoose from \"mongoose\";\r\n+import { User } from \"./models/todos/user.models.js\";\r\n+\r\n+dotenv.config();\r\n+const app = express();\r\n+app.use(cors());\r\n+\r\n+\r\n+app.use(express.json());\r\n+\r\n+mongoose.connect(process.env.MONGODB, {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true\r\n+}).then(() => {\r\n+    console.log(\"Connected to MongoDB successfully\");\r\n+}).catch((err) => {\r\n+    console.log(\"Error connecting to MongoDB: \" + err);\r\n+});\r\n+\r\n+app.post(\"/createuser\", async (req, res) => {\r\n+    try {\r\n+\r\n+        const { username, email, password } = req.body;\r\n+\r\n+\r\n+        if (!username || !email || !password) {\r\n+            return res.status(400).json({ message: \"All fields are required\" });\r\n+        }\r\n+\r\n+\r\n+        const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: \"Username or Email already exists\" });\r\n+        }\r\n+\r\n+\r\n+        const newUser = new User({\r\n+            username,\r\n+            email,\r\n+            password\r\n+        });\r\n+\r\n+\r\n+        await newUser.save();\r\n+\r\n+\r\n+        return res.status(200).json({ message: \"User has been created successfully\" });\r\n+    } catch (error) {\r\n+        // Handle server errors\r\n+        return res.status(500).json({ message: \"Server error\", error: error.message });\r\n+    }\r\n+});\r\n+app.get(\"/getuser\", async (req, res) =>{\r\n+    const existingUser = await User.find();\r\n+    if (existingUser) {\r\n+        return res.status(200).json({ message: existingUser });\r\n+    }\r\n+    return res.status(400).json({ message: \"somwthing went wrong\" });\r\n+});\r\n+app.listen(8200, () => {\r\n+    console.log(\"Server is running on port 8200\");\r\n+});\r\n"
                }
            ],
            "date": 1723618771636,
            "name": "Commit-0",
            "content": "import express from \"express\";\r\nimport dotenv  from \"dotenv\";\r\nimport mongoose from \"mongoose\";\r\n\r\ndotenv.config();\r\nconst app = express();\r\n\r\nconst data = [{\r\n    \"id\":0,\r\n   \"name\":\"jatin\",\r\n   \"Class\" : \"C- class\"    \r\n}, {\r\n    \"id\":1,\r\n    \"name\":\"Rahul\",\r\n    \"Class\" : \"A- class\"    \r\n }]\r\n\r\nmongoose.connect(process.env.MONGODB).then(()=>{\r\n    console.log(\r\n        \"connected succesfully\"\r\n    )\r\n}).catch((err)=>{\r\n    console.log(\"Server error\" + err)\r\n})\r\n// Schema\r\nconst userSchema = new mongoose.Schema({\r\n    firstName: {\r\n        type: String,\r\n        required: true,\r\n    }\r\n});\r\nconst User = mongoose.model('user', userSchema)\r\n\r\n\r\n//get all data \r\n//1: Method : -- GEt Method done\r\n//2: RouteName : /getuser\r\n//3: All Data : \r\n\r\n\r\n///getbyId\r\n\r\n\r\n//1: Method : -- GEt Method done\r\n//getuser: getuserid\r\n//2: getbyid\r\n///\r\n\r\n//res: status , json()   404 , 500 , 200 , 201 ,Server error \r\napp.get(\"/getuser\" , function(req, res){\r\n    \r\nreturn res.status(200).send(data);\r\n});\r\napp.get(\"/:getuserid\" , function(req, res){\r\n    return res.status(200).send(data.filter(fruit => fruit.id === 1))\r\n}) \r\n\r\n\r\n\r\napp.listen( 8200, ()=>{\r\n    console.log(\"server is running on port 8200\")\r\n})\r\n"
        }
    ]
}